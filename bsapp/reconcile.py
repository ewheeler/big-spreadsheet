#!/usr/bin/env python
# vim: ai ts=4 sts=4 et sw=4 encoding=utf-8

import math
import operator

from metaphone import dm
from jarow import jarow
from Levenshtein import distance
from dameraulevenshtein import dameraulevenshtein

def reconcile_country(raw_country):
    country_map = {u'AFGHANISTAN': u'AFG',
    u'ALBANIA': u'ALB',
    u'ALGERIA': u'DZA',
    u'AMERICAN SAMOA': u'ASM',
    u'ANDORRA': u'AND',
    u'ANGOLA': u'AGO',
    u'ANGUILLA': u'AIA',
    u'ANTARCTICA': None,
    u'ANTIGUA AND BARBUDA': u'ATG',
    u'ARGENTINA': u'ARG',
    u'ARMENIA': u'ARM',
    u'ARUBA': u'ABW',
    u'AUSTRALIA': u'AUS',
    u'AUSTRIA': u'AUT',
    u'AZERBAIJAN': u'AZE',
    u'BAHAMAS': u'BHS',
    u'BAHRAIN': u'BHR',
    u'BANGLADESH': u'BGD',
    u'BARBADOS': u'BRB',
    u'BELARUS': u'BLR',
    u'BELGIUM': u'BEL',
    u'BELIZE': u'BLZ',
    u'BENIN': u'BEN',
    u'BERMUDA': u'BMU',
    u'BHUTAN': u'BTN',
    u'BOLIVIA': u'BOL',
    u'BOSNIA AND HERZEGOVINA': u'BIH',
    u'BOTSWANA': u'BWA',
    u'BOUVET ISLAND': None,
    u'BRAZIL': u'BRA',
    u'BRITISH INDIAN OCEAN TERRITORY': None,
    u'BRUNEI DARUSSALAM': u'BRN',
    u'BULGARIA': u'BGR',
    u'BURKINA FASO': u'BFA',
    u'BURUNDI': u'BDI',
    u'CAMBODIA': u'KHM',
    u'CAMEROON': u'CMR',
    u'CANADA': u'CAN',
    u'CAPE VERDE': u'CPV',
    u'CAYMAN ISLANDS': u'CYM',
    u'CENTRAL AFRICAN REPUBLIC': u'CAF',
    u'CHAD': u'TCD',
    u'CHILE': u'CHL',
    u'CHINA': u'CHN',
    u'CHRISTMAS ISLAND': None,
    u'COCOS (KEELING) ISLANDS': None,
    u'COLOMBIA': u'COL',
    u'COMOROS': u'COM',
    u'CONGO': u'COG',
    u'CONGO, THE DEMOCRATIC REPUBLIC OF THE': u'COD',
    u'COOK ISLANDS': u'COK',
    u'COSTA RICA': u'CRI',
    u"COTE D'IVOIRE": u'CIV',
    u'CROATIA': u'HRV',
    u'CUBA': u'CUB',
    u'CYPRUS': u'CYP',
    u'CZECH REPUBLIC': u'CZE',
    u'DENMARK': u'DNK',
    u'DJIBOUTI': u'DJI',
    u'DOMINICA': u'DMA',
    u'DOMINICAN REPUBLIC': u'DOM',
    u'ECUADOR': u'ECU',
    u'EGYPT': u'EGY',
    u'EL SALVADOR': u'SLV',
    u'EQUATORIAL GUINEA': u'GNQ',
    u'ERITREA': u'ERI',
    u'ESTONIA': u'EST',
    u'ETHIOPIA': u'ETH',
    u'FALKLAND ISLANDS (MALVINAS)': u'FLK',
    u'FAROE ISLANDS': u'FRO',
    u'FIJI': u'FJI',
    u'FINLAND': u'FIN',
    u'FRANCE': u'FRA',
    u'FRENCH GUIANA': u'GUF',
    u'FRENCH POLYNESIA': u'PYF',
    u'FRENCH SOUTHERN TERRITORIES': None,
    u'GABON': u'GAB',
    u'GAMBIA': u'GMB',
    u'GEORGIA': u'GEO',
    u'GERMANY': u'DEU',
    u'GHANA': u'GHA',
    u'GIBRALTAR': u'GIB',
    u'GREECE': u'GRC',
    u'GREENLAND': u'GRL',
    u'GRENADA': u'GRD',
    u'GUADELOUPE': u'GLP',
    u'GUAM': u'GUM',
    u'GUATEMALA': u'GTM',
    u'GUINEA': u'GIN',
    u'GUINEA-BISSAU': u'GNB',
    u'GUYANA': u'GUY',
    u'HAITI': u'HTI',
    u'HEARD ISLAND AND MCDONALD ISLANDS': None,
    u'HOLY SEE (VATICAN CITY STATE)': u'VAT',
    u'HONDURAS': u'HND',
    u'HONG KONG': u'HKG',
    u'HUNGARY': u'HUN',
    u'ICELAND': u'ISL',
    u'INDIA': u'IND',
    u'INDONESIA': u'IDN',
    u'IRAN, ISLAMIC REPUBLIC OF': u'IRN',
    u'IRAQ': u'IRQ',
    u'IRELAND': u'IRL',
    u'ISRAEL': u'ISR',
    u'ITALY': u'ITA',
    u'JAMAICA': u'JAM',
    u'JAPAN': u'JPN',
    u'JORDAN': u'JOR',
    u'KAZAKHSTAN': u'KAZ',
    u'KENYA': u'KEN',
    u'KIRIBATI': u'KIR',
    u"KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF": u'PRK',
    u'KOREA, REPUBLIC OF': u'KOR',
    u'KUWAIT': u'KWT',
    u'KYRGYZSTAN': u'KGZ',
    u"LAO PEOPLE'S DEMOCRATIC REPUBLIC": u'LAO',
    u'LATVIA': u'LVA',
    u'LEBANON': u'LBN',
    u'LESOTHO': u'LSO',
    u'LIBERIA': u'LBR',
    u'LIBYAN ARAB JAMAHIRIYA': u'LBY',
    u'LIECHTENSTEIN': u'LIE',
    u'LITHUANIA': u'LTU',
    u'LUXEMBOURG': u'LUX',
    u'MACAO': u'MAC',
    u'MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF': u'MKD',
    u'MADAGASCAR': u'MDG',
    u'MALAWI': u'MWI',
    u'MALAYSIA': u'MYS',
    u'MALDIVES': u'MDV',
    u'MALI': u'MLI',
    u'MALTA': u'MLT',
    u'MARSHALL ISLANDS': u'MHL',
    u'MARTINIQUE': u'MTQ',
    u'MAURITANIA': u'MRT',
    u'MAURITIUS': u'MUS',
    u'MAYOTTE': None,
    u'MEXICO': u'MEX',
    u'MICRONESIA, FEDERATED STATES OF': u'FSM',
    u'MOLDOVA, REPUBLIC OF': u'MDA',
    u'MONACO': u'MCO',
    u'MONGOLIA': u'MNG',
    u'MONTSERRAT': u'MSR',
    u'MOROCCO': u'MAR',
    u'MOZAMBIQUE': u'MOZ',
    u'MYANMAR': u'MMR',
    u'NAMIBIA': u'NAM',
    u'NAURU': u'NRU',
    u'NEPAL': u'NPL',
    u'NETHERLANDS': u'NLD',
    u'NETHERLANDS ANTILLES': u'ANT',
    u'NEW CALEDONIA': u'NCL',
    u'NEW ZEALAND': u'NZL',
    u'NICARAGUA': u'NIC',
    u'NIGER': u'NER',
    u'NIGERIA': u'NGA',
    u'NIUE': u'NIU',
    u'NORFOLK ISLAND': u'NFK',
    u'NORTHERN MARIANA ISLANDS': u'MNP',
    u'NORWAY': u'NOR',
    u'OMAN': u'OMN',
    u'PAKISTAN': u'PAK',
    u'PALAU': u'PLW',
    u'PALESTINIAN TERRITORY, OCCUPIED': None,
    u'PANAMA': u'PAN',
    u'PAPUA NEW GUINEA': u'PNG',
    u'PARAGUAY': u'PRY',
    u'PERU': u'PER',
    u'PHILIPPINES': u'PHL',
    u'PITCAIRN': u'PCN',
    u'POLAND': u'POL',
    u'PORTUGAL': u'PRT',
    u'PUERTO RICO': u'PRI',
    u'QATAR': u'QAT',
    u'REUNION': u'REU',
    u'ROMANIA': u'ROM',
    u'RUSSIAN FEDERATION': u'RUS',
    u'RWANDA': u'RWA',
    u'SAINT HELENA': u'SHN',
    u'SAINT KITTS AND NEVIS': u'KNA',
    u'SAINT LUCIA': u'LCA',
    u'SAINT PIERRE AND MIQUELON': u'SPM',
    u'SAINT VINCENT AND THE GRENADINES': u'VCT',
    u'SAMOA': u'WSM',
    u'SAN MARINO': u'SMR',
    u'SAO TOME AND PRINCIPE': u'STP',
    u'SAUDI ARABIA': u'SAU',
    u'SENEGAL': u'SEN',
    u'SERBIA AND MONTENEGRO': None,
    u'SEYCHELLES': u'SYC',
    u'SIERRA LEONE': u'SLE',
    u'SINGAPORE': u'SGP',
    u'SLOVAKIA': u'SVK',
    u'SLOVENIA': u'SVN',
    u'SOLOMON ISLANDS': u'SLB',
    u'SOMALIA': u'SOM',
    u'SOUTH AFRICA': u'ZAF',
    u'SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS': None,
    u'SPAIN': u'ESP',
    u'SRI LANKA': u'LKA',
    u'SUDAN': u'SDN',
    u'SURINAME': u'SUR',
    u'SVALBARD AND JAN MAYEN': u'SJM',
    u'SWAZILAND': u'SWZ',
    u'SWEDEN': u'SWE',
    u'SWITZERLAND': u'CHE',
    u'SYRIAN ARAB REPUBLIC': u'SYR',
    u'TAIWAN, PROVINCE OF CHINA': u'TWN',
    u'TAJIKISTAN': u'TJK',
    u'TANZANIA, UNITED REPUBLIC OF': u'TZA',
    u'THAILAND': u'THA',
    u'TIMOR-LESTE': None,
    u'TOGO': u'TGO',
    u'TOKELAU': u'TKL',
    u'TONGA': u'TON',
    u'TRINIDAD AND TOBAGO': u'TTO',
    u'TUNISIA': u'TUN',
    u'TURKEY': u'TUR',
    u'TURKMENISTAN': u'TKM',
    u'TURKS AND CAICOS ISLANDS': u'TCA',
    u'TUVALU': u'TUV',
    u'UGANDA': u'UGA',
    u'UKRAINE': u'UKR',
    u'UNITED ARAB EMIRATES': u'ARE',
    u'UNITED KINGDOM': u'GBR',
    u'UNITED STATES': u'USA',
    u'UNITED STATES MINOR OUTLYING ISLANDS': None,
    u'URUGUAY': u'URY',
    u'UZBEKISTAN': u'UZB',
    u'VANUATU': u'VUT',
    u'VENEZUELA': u'VEN',
    u'VIET NAM': u'VNM',
    u'VIRGIN ISLANDS, BRITISH': u'VGB',
    u'VIRGIN ISLANDS, U.S.': u'VIR',
    u'WALLIS AND FUTUNA': u'WLF',
    u'WESTERN SAHARA': u'ESH',
    u'YEMEN': u'YEM',
    u'ZAMBIA': u'ZMB',
    u'ZIMBABWE': u'ZWE'}

    # check if term is a key in country_map
    if raw_country.upper() in country_map:
        return True, country_map[raw_country.upper()] 
	
    search_sound = dm(unicode(raw_country))
    suggestions = []
    for c in country_map.keys():
        country_sound = dm(unicode(c))
	if search_sound[0] == country_sound[0]:
	    suggestions.append((1.0, raw_country, c, country_map[c]))
	    continue
	else:
	    if search_sound[1] is not None:
		# see if secondary metaphone of search_sound matches
		# primary metaphone of obj
		if search_sound[1] == country_sound[0]:
		    suggestions.append((1.0, raw_country, c, country_map[c]))
		    continue

	    # no exact match, so see if the primary metaphones are similar
	    primary_sound_dist = jarow(str(search_sound[0]), str(country_sound[0]))
	    if primary_sound_dist >= 2:
		similar.append((primary_sound_dist, raw_country, c, country_map[c]))
		continue
    return False, {'double-metaphone': suggestions}

def reconcile_product(raw_product):
    product_map = {u'anti-diphtheria serum': u'anti-diphtheria-serum',
    u'anti-diphtheria-serum': u'anti-diphtheria-serum',
    u'anti-scorpion venom': u'anti-scorpion-venom',
    u'anti-scorpion-venom': u'anti-scorpion-venom',
    u'anti-tetanus serum': u'anti-tetanus-serum',
    u'anti-tetanus-serum': u'anti-tetanus-serum',
    u'antivenin': u'snake-antivenom',
    u'bcg': u'bcg-20',
    u'bcg-10': u'bcg-20',
    u'bcg-20': u'bcg-20',
    u'bopv-20': u'bopv-20',
    u'bvpo': u'bopv-20',
    u'bvpo-20': u'bopv-20',
    u'cholera': u'cholera-2',
    u'cholera-1': u'cholera-1',
    u'cholera-2': u'cholera-2',
    u'dt-10': u'dt-10',
    u'dt-20': u'dt-20',
    u'dtc': u'dtp-20',
    u'dtc-10': u'dtp-20',
    u'dtc-hepb': u'dtp-hepb-10',
    u'dtc-hepb-10': u'dtp-hepb-10',
    u'dtc-hepb-2': u'dtp-hepb-2',
    u'dtc-hepb-hib': u'dtp-hepbhib-2',
    u'dtc-hepb-hib-1': u'dtp-hepbhib-1',
    u'dtc-hepb-hib-2': u'dtp-hepbhib-2',
    u'dtc-hib': u'dtp-hib-10',
    u'dtc-hib-1 (liquide)': u'dtp-hib-1-lqd',
    u'dtc-hib-1 (lyophilise)': u'dtp-hib-1-lph',
    u'dtc-hib-10': u'dtp-hib-10',
    u'dtp-10': u'dtp-10',
    u'dtp-20': u'dtp-20',
    u'dtp-hepb+hib-1': u'dtp-hepbhib-1',
    u'dtp-hepb+hib-2': u'dtp-hepbhib-2',
    u'dtp-hepb-10': u'dtp-hepb-10',
    u'dtp-hepb-2': u'dtp-hepb-2',
    u'dtp-hepb-hib-1': u'dtp-hepbhib-1',
    u'dtp-hepbhib-1': u'dtp-hepbhib-1',
    u'dtp-hepbhib-2': u'dtp-hepbhib-2',
    u'dtp-hib-1 (lph)': u'dtp-hib-1-lph',
    u'dtp-hib-1 (lqd)': u'dtp-hib-1-lqd',
    u'dtp-hib-1-lph': u'dtp-hib-1-lph',
    u'dtp-hib-1-lqd': u'dtp-hib-1-lqd',
    u'dtp-hib-10': u'dtp-hib-10',
    u'foetal bovine serum': u'foetal-bovine-serum',
    u'foetal-bovine-serum': u'foetal-bovine-serum',
    u'hepb': u'hepb-20',
    u'hepb adulte': u'hepb-10-adult',
    u'hepb-1': u'hepb-1',
    u'hepb-1 adult': u'hepb-1-adult',
    u'hepb-1 adulte': u'hepb-1-adult',
    u'hepb-1-adult': u'hepb-1-adult',
    u'hepb-10': u'hepb-10',
    u'hepb-10 adult': u'hepb-10-adult',
    u'hepb-10 adulte': u'hepb-10-adult',
    u'hepb-10-adult': u'hepb-10-adult',
    u'hepb-2': u'hepb-2',
    u'hepb-20': u'hepb-20',
    u'hepb-6': u'hepb-6',
    u'hib-1': u'hib-1',
    u'hib-1 (liquide)': u'hib-1-lqd',
    u'hib-1 (lph)': u'hib-1-lph',
    u'hib-1 (lqd)': u'hib-1-lqd',
    u'hib-1 (lyophilise)': u'hib-1-lph',
    u'hib-1-lph': u'hib-1-lph',
    u'hib-1-lqd': u'hib-1-lqd',
    u'hib-10': u'hib-10',
    u'influenza-1': u'influenza-1',
    u'influenza-10': u'influenza-10',
    u'ipv-1': u'ipv-1',
    u'ipv-10': u'ipv-10',
    u'mea-1': u'mea-1',
    u'mea-10': u'mea-10',
    u'mea-20': u'mea-20',
    u'measles': u'measles',
    u'mening a/c-10': u'mening-ac-10',
    u'mening a/c-50': u'mening-ac-50',
    u'mening ac&w-50': u'mening-acw-50',
    u'mening acyw135-1': u'mening-acyw135-1',
    u'mening acyw135-10': u'mening-acyw135-10',
    u'mening-ac-10': u'mening-ac-10',
    u'mening-ac-50': u'mening-ac-50',
    u'mening-acw-50': u'mening-acw-50',
    u'mening-acyw135-1': u'mening-acyw135-1',
    u'mening-acyw135-10': u'mening-acyw135-10',
    u'mmr-1': u'mmr-1',
    u'mmr-10': u'mmr-10',
    u'mmr-5': u'mmr-5',
    u'mopv1-20': u'mopv1-20',
    u'mopv3-20': u'mopv3-20',
    u'mr-10': u'mr-10',
    u'mr-2': u'mr-2',
    u'mumps': u'mumps',
    u'mvpo1': u'mopv1-20',
    u'mvpo1-20': u'mopv1-20',
    u'mvpo3': u'mopv3-20',
    u'mvpo3-20': u'mopv3-20',
    u'opv bulk': u'opv-bulk',
    u'opv-50': u'opv-50',
    u'opv-bulk': u'opv-bulk',
    u'pcv1-7': u'pcv1-7',
    u'pneumococcal serum': u'pneumococcal-serum',
    u'pneumococcal-serum': u'pneumococcal-serum',
    u'rabies': u'rabies',
    u'rabies hdc-1': u'rabies-hdc-1',
    u'rabies hri-1': u'rabies-hri-1',
    u'rabies-1': u'rabies-1',
    u'rabies-2': u'rabies-2',
    u'rabies-5': u'rabies-5',
    u'rabies-hdc-1': u'rabies-hdc-1',
    u'rabies-hri-1': u'rabies-hri-1',
    u'ror': u'mmr-10',
    u'ror-1': u'mmr-1',
    u'ror-10': u'mmr-10',
    u'ror-5': u'mmr-5',
    u'rubella-1': u'rubella-1',
    u'rubella-10': u'rubella-10',
    u'serum anti-diphterie': u'anti-diphtheria-serum',
    u'serum anti-scorpion': u'anti-scorpion-venom',
    u'serum anti-tetanique': u'anti-tetanus-serum',
    u'snake antivenom': u'snake-antivenom',
    u'snake-antivenom': u'snake-antivenom',
    u'td-10': u'td-10',
    u'td-20': u'td-20',
    u'topv-10': u'topv-10',
    u'topv-20': u'topv-20',
    u'tt uniject': u'tt-uniject',
    u'tt-10': u'tt-10',
    u'tt-20': u'tt-20',
    u'tt-uniject': u'tt-uniject',
    u'tuberculin/ppd': u'tuberculinppd',
    u'tuberculinppd': u'tuberculinppd',
    u'tvpo': u'topv-10',
    u'tvpo-10': u'topv-10',
    u'tvpo-20': u'topv-20',
    u'typhoid': u'typhoid',
    u'vaa': u'yf-50',
    u'vaa-1': u'yf-1',
    u'vaa-10': u'yf-10',
    u'vaa-20': u'yf-20',
    u'vaa-5': u'yf-5',
    u'vaa-50': u'yf-50',
    u'vam ac-10': u'mening-ac-10',
    u'vam ac-50': u'mening-ac-50',
    u'vam w135-1': u'mening-acyw135-1',
    u'vam w135-10': u'mening-acyw135-10',
    u'vam w50': u'mening-acw-50',
    u'vao': u'mumps',
    u'var': u'measles',
    u'var-1': u'mea-1',
    u'var-10': u'mea-10',
    u'var-20': u'mea-20',
    u'vat': u'tt-20',
    u'vpi-1': u'ipv-1',
    u'vpi-10': u'ipv-10',
    u'vpo': u'opv-50',
    u'vpo-50': u'opv-50',
    u'yf-1': u'yf-1',
    u'yf-10': u'yf-10',
    u'yf-20': u'yf-20',
    u'yf-5': u'yf-5',
    u'yf-50': u'yf-50'}

    # check if term is a key in product_map
    if raw_product.lower() in product_map:
        return True, product_map[raw_product.lower()] 

    # list for dm distance results
    # as tuples [(edit_distance, "product_map key"),...]
    dl_dists = []

    # find damerau-levenshtein distance between
    # raw_product and all of the keys in product_map
    for term in product_map.keys():
	dl = dameraulevenshtein(term, raw_product)
	dl_dists.append((dl, raw_product, term, product_map[term]))

    # sort tuples by edit distance
    dl_dists.sort(None, operator.itemgetter(0))

    # edit distance threshold is half the length of the
    # raw_product string (rounded up)
    # TODO accept as parameter
    dl_threshold = math.ceil(float(len(raw_product))/float(2))

    # limit to edit distances below dl_threshold
    dl_suggestions = [d for d in dl_dists if d[0] <= dl_threshold]

    return False, {"damerau-levenshtein": dl_suggestions}
